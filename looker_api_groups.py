import time
import sys
import looker_sdk
from looker_sdk.sdk.api40 import models

# --- Konfiguracja ---
REFRESH_INTERVAL_MINUTES = 15
GROUP_NAME_PREFIX = "4"

# --- Inicjalizacja SDK ---
try:
    sdk = looker_sdk.init40()
except Exception as e:
    print(f"B≈ÇƒÖd inicjalizacji Looker SDK. Sprawd≈∫ plik looker.ini: {e}")
    sys.exit(1)

def check_available_fields():
    """
    Funkcja diagnostyczna: Sprawdza i drukuje dostƒôpne pola w widoku 'user'
    w modelu 'system__activity', aby zweryfikowaƒá dostƒôp do 'user.license_type'.
    """
    print("--- Diagnostyka: Sprawdzanie dostƒôpnych p√≥l ---")
    try:
        explore = sdk.lookml_model_explore(
            lookml_model_name="system__activity",
            explore_name="user"
        )
        print("Uda≈Ço siƒô po≈ÇƒÖczyƒá z modelem 'system__activity'.")
        
        # Tworzymy listƒô nazw p√≥l z wymiar√≥w i miar
        dimensions = [field.name for field in explore.fields.dimensions]
        measures = [field.name for field in explore.fields.measures]
        all_fields = dimensions + measures
        
        # Sprawdzamy, czy kluczowe pole jest na li≈õcie
        if "user.license_type" in all_fields:
            print("‚úÖ SUKCES: Pole 'user.license_type' jest dostƒôpne dla Twojego u≈ºytkownika API.")
        else:
            print("‚ö†Ô∏è OSTRZE≈ªENIE: Pole 'user.license_type' NIE jest dostƒôpne.")
            print("   Najczƒôstsza przyczyna: U≈ºytkownik API nie ma uprawnienia 'see_system_activity'.")
            print("   Popro≈õ administratora Lookera o nadanie tego uprawnienia.")

        print("-------------------------------------------------")
        
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD: Nie mo≈ºna pobraƒá informacji o modelu 'system__activity'.")
        print(f"   Upewnij siƒô, ≈ºe Tw√≥j u≈ºytkownik API ma rolƒô z uprawnieniem 'see_system_activity'.")
        print(f"   Szczeg√≥≈Çy b≈Çƒôdu: {e}")
        print("-------------------------------------------------")
        # Je≈õli nie mo≈ºemy uzyskaƒá dostƒôpu do modelu, nie ma sensu kontynuowaƒá
        sys.exit(1)


def get_user_license_types():
    """
    Pobiera typy licencji dla wszystkich u≈ºytkownik√≥w.
    """
    try:
        query_body = models.WriteQuery(
            model="system__activity",
            view="user",
            fields=["user.id", "user.license_type"],
            limit="5000"
        )
        query_result_str = sdk.run_inline_query(
            result_format="json",
            body=query_body
        )
        # SDK zwraca string JSON, trzeba go zdeserializowaƒá
        import json
        query_result = json.loads(query_result_str)
        
        user_licenses = {}
        
        if not query_result or not isinstance(query_result, list):
            return {}
            
        # Sprawdzamy pierwszy wiersz, czy zawiera potrzebne pole
        if query_result and "user.license_type" not in query_result[0]:
            print("‚ö†Ô∏è OSTRZE≈ªENIE: Odpowied≈∫ z API nie zawiera pola 'user.license_type'. Sprawd≈∫ uprawnienia.")
            return None # Zwracamy None, aby zasygnalizowaƒá problem

        for row in query_result:
            user_id = str(row.get("user.id"))
            license_type = row.get("user.license_type", "Standard") # Domy≈õlnie 'Standard', je≈õli brak
            user_licenses[user_id] = "Viewer" if license_type == "viewer" else "Standard"
            
        return user_licenses

    except Exception as e:
        print(f"B≈ÇƒÖd podczas pobierania typ√≥w licencji u≈ºytkownik√≥w: {e}")
        return None

def analyze_groups():
    """
    Analizuje grupy, zlicza u≈ºytkownik√≥w i wy≈õwietla wyniki.
    """
    print("\nRozpoczynam analizƒô grup...")
    
    user_licenses = get_user_license_types()
    if user_licenses is None: # Sprawdzamy, czy wystƒÖpi≈Ç b≈ÇƒÖd w poprzedniej funkcji
        print("Nie uda≈Ço siƒô pobraƒá informacji o licencjach z powodu braku danych lub b≈Çƒôdu. Prerywam ten cykl.")
        return

    try:
        all_groups = sdk.all_groups(fields="id,name")
        filtered_groups = [group for group in all_groups if group.name.startswith(GROUP_NAME_PREFIX)]

        if not filtered_groups:
            print(f"Nie znaleziono grup o nazwie zaczynajƒÖcej siƒô od '{GROUP_NAME_PREFIX}'.")
            return

        print("\n--- Raport Licencji U≈ºytkownik√≥w w Grupach ---")
        for group in filtered_groups:
            viewer_count = 0
            standard_count = 0
            
            group_users = sdk.all_group_users(group_id=group.id)

            for user in group_users:
                license_type = user_licenses.get(str(user.id), "Standard") # Bezpieczniejsze pobieranie
                if license_type == "Viewer":
                    viewer_count += 1
                else: # Wszyscy inni (w tym ci bez licencji w mapie) bƒôdƒÖ Standard
                    standard_count += 1
            
            total_users = viewer_count + standard_count

            print(f"\nGrupa: {group.name} (ID: {group.id})")
            print(f"  Liczba u≈ºytkownik√≥w 'Standard': {standard_count}")
            print(f"  Liczba u≈ºytkownik√≥w 'Viewer': {viewer_count}")
            print(f"  Suma u≈ºytkownik√≥w: {total_users}")
        print("\n--- Koniec Raportu ---")

    except Exception as e:
        print(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas analizy grup: {e}")

if __name__ == "__main__":
    # Uruchom diagnostykƒô tylko raz na poczƒÖtku
    check_available_fields()
    
    try:
        while True:
            analyze_groups()
            print(f"\nSkrypt zostanie ponownie uruchomiony za {REFRESH_INTERVAL_MINUTES} minut.")
            print("Naci≈õnij Ctrl+C, aby zako≈Ñczyƒá.")
            time.sleep(REFRESH_INTERVAL_MINUTES * 60)
    except KeyboardInterrupt:
        print("\n\nPrzerwanie przez u≈ºytkownika. Zamykanie skryptu... üëã")
        sys.exit(0)
